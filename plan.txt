1. Random length of time eating 
2. implement third option

RANDOM DROP STRATEGY
1. Each Philosopher thinks for t timesteps, with 1 <= t <= 10
2. When a Philosopher is done thinking (each Philosopher is checked at the beginning of a time step), she enters Queue 1
3. Each Philosopher in Queue 1 dequeues and tries to grab 1 Chopstick adjacent to them (beginning with leftChopstick)
4. IF: Philosopher i that is dequeued has 2 Chopsticks, set her status is set to Eating for t timesteps (1 <= t <= 20) if she has 2 Chopsticks.
ELSE:
	a. A random double n is generated  0 <= n <= 1
	b. For Philosopher i that is dequeued, probability of dropping chopstick is calculated: prob = x - y * 0.10 where x is the amount of 
	times Philosopher i has eaten and y is the amount of times Philosopher with the least amount of times eaten has eaten.
	c. If n < prob, Philosopher i drops the Chopstick she is holding
5. After a Philosopher is dequeued from Queue 1 she is queued into Queue 2.
6. Queue 2 is copied to Queue 1 and Queue 2 is cleared
7. Timestep ends and total timesteps increase by 1

DELAYED RECOVERY FROM DEADLOCK
1. Each Philosopher thinks for t timesteps, with 1 <= t <= 10
2. When a Philosopher is done thinking (each Philosopher is checked at the beginning of a time step), she enters Queue 1
3. Each Philosopher in Queue 1 dequeues and tries to grab 1 Chopstick adjacent to them (beginning with leftChopstick)
4. After a Philosopher is dequeued from Queue 1 she either:
	A. Enters Queue 2 if she has 1 or 0 Chopsticks
	B. Her status is set to Eating for t timesteps (1 <= t <= 20) if she has 2 Chopsticks
5. If the length of Queue 2 = n, where n is the amount of Philosophers at the table, int DEADLOCK += 1
6. If DEADLOCK = 3, all Philosophers from Queue 2 drop their chopsticks and are dequeued
	else Queue 2 is copied to Queue 1 and Queue 2 is cleared
8. Timestep ends and total timesteps increase by 1